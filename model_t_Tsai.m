function [PSD] = model_t_Tsai(f, D, H, vb, qb, W, theta, r0, t, tau_c50, D50, varargin)
% FOR THE PURPOSE OF RUNNING SENSITIVITY OF TSAI MODEL
% Estimated PSD generated by sediment transport (Tsai et al., 2012)
% USAGE:
%   PSD = model_saltation(f, D, H) using fluvial parameters from Tsai et
%       al., 2012
%   PSD = model_saltation(f, D, H, qb, W, theta, r0, tau_c50, D50) with
%       values of qb, W, theta specify for different rivers
%   PSD = model_saltation(f, D, H, qb, W, theta, r0, tau_c50, D50, vc0, 
%       epsilon, Q0, eta)
% Input:
%       f is frequency range (Hz)
%       D is grain diameter (m)
%       H is flow depth (m)
%       qb is bedload flux (m3/s). qb = 1 means inversion
%       W is channel width   (m)
%       theta is channel slope (degree)
%       tau_c50 is critical shear stress of D50 (-)
%       D50 is median grain size (m)
%       varargin (optinal)

if ((nargin < 4)) || (isempty(qb))
    qb = 1e-3;
end

if ((nargin < 5)) || (isempty(W))
    W = 50;
end

if ((nargin < 6)) || (isempty(theta))
    theta = 1.4;
end

if ((nargin < 7)) || (isempty(r0))
    r0 = 600;
end

if ((nargin < 9)) || (isempty(r0))
    t = 0.15;
end

if ((nargin < 10)) || (isempty(tau_c50))
    dummy = 0.407*log(142*tand(theta));
    % from Gimbert et al., 2014 implementation
    tau_c50 = exp(2.59 * (10^(-2)) * (dummy^4) + 8.94 * 10^(-2) * ...
        (dummy^3) + 0.142 * (dummy^2) + 0.41 * dummy - 3.14);
    % from Lamb et al., 2008
    % tau_c50 = 0.15*(tand(theta))^0.25;
end

if ((nargin < 11)) || (isempty(D50))
    D50 = D;
end

%% Default parameters from Tsai et al., 2012
v0 = 2206; %m/s
z0 = 1000; %m
f0 = 1; %Hz
Q0 = 20;
a = 0.272;
eta = 0;
epsilon = a/(1-a);
vc0 = (v0*gamma(1+a)/(2*pi*z0*f0)^a)^(1/(1-a));


rho_s = 2700; % sediment density (kg/m3)
rho_f = 1000; % fluid density (kg/m3)
g = 9.81; % gravitational accelaration (m2/s)


% Retrieving parameters from varargin
optionals = {};
numInputs = nargin - 11;
inputVar = 1;

while numInputs > 0
    if ~isempty(varargin{inputVar})
        optionals{inputVar} = varargin{inputVar};
    end
    numInputs = numInputs - 1;
    inputVar = inputVar + 1;
end

len = length(optionals);
if len > 0
    vc0 = optionals{1};
    epsilon = optionals{2};
    Q0 = optionals{3};
    eta = optionals{4};
end


%% Seismic model
vc = vc0*(f./f0).^(-epsilon); % phase velocity
vu = vc./(1+epsilon); % group velocity
% Q = Q0*(f./f0).^eta; % quality factor

%% Attenuation of seismic wave (chi is a function of beta)
beta = 2*pi*r0*(1+epsilon)*f.^(1+epsilon-eta)./(vc0*Q0*f0^(epsilon-eta));
chi = 2*log(1+1./beta).*exp(-2*beta)+(1-exp(-beta)).*exp(-beta).*sqrt(2*pi./beta);

%% Bedload impact frequency model
Vp = pi*D^3/6; % volume of a particle (m3)
m = rho_s*Vp; % mass of a particle (kg)
tau_c = tau_c50*(D/D50)^(-0.9); % critical shear stress

% if tau_c < 0.03
%     tau_c = 0.03;
% elseif tau_c > 0.06
%     tau_c = 0.06;
% end

R = (rho_s-rho_f)/rho_f;
u = sqrt(g*H*sind(theta));
tau = u^2/R/g/D;

ks = 3*D; % roughness scale (m)
U = 8.1*u*(H/ks)^1.6;

Ub = 1.56*sqrt(R*g*D)*(tau/tau_c-1)^0.56;
Hb = 1.44*D*(tau/tau_c-1)^0.50;

% checking negative values
if (tau/tau_c <= 1)
    %disp("tau/tau_c < 1");
    PSD = 0;
    return
end

if Ub > U
%     disp("Ub > U");
%     disp([Ub, U]);
    Ub = U;
end

if Hb > H
%     disp("Hb > H");
%     disp([Hb, H]);
    Hb = H;
end

% estimate cD from Dietrich 1982
CSF = 0.8; % Corey Shape Factor (0.9: nearly spherical; 0.3: flat)
P = 3.5; % 0:perfect angular; 6:perfect round (3.5 is typical roudness)
nu = 1e-6;
D_star = (R * g * D^3) / nu^2;
D_star = log10(D_star);
R1 = -3.76715 + 1.92944 * D_star - 0.09815 * (D_star^2) - ...
        0.00575 * (D_star^3) + 0.00056 * (D_star^4);
R2 = log10(1 - ((1 - CSF) / 0.85)) - (1 - CSF)^2.3 * tanh(D_star - 4.6) + ...
        0.3 * (0.5 - CSF) * (1 - CSF)^2 * (D_star - 4.6);
R3 = (0.65 - ((CSF / 2.83) * tanh(D_star - 4.6)))^(1 + ((3.5 - P) / 2.5));
W_star = R3 * 10^(R1 + R2);

% estimate settling velocity from Dietrich 1982
w_s = (W_star * R * g * nu )^(1/3);
cD = (4 / 3) * (R * g * D) / (w_s^2);

% estimate terminal settling veloctity ws
wst = sqrt(4*R*g*D/3/cD); % interconnected with cD formula (inverse)
Hb_c = 3*cD*rho_f*Hb/(2*rho_s*D*cosd(theta));
wi = wst*cosd(theta)*sqrt(1-exp(-Hb_c)); % from Lamb et al., 2008
C1 = 2/3; % rise and fall time of a particle
% average settling velocity across the bedload layer (Tsai et al., 2012)
ws = Hb_c*wst*cosd(theta)/(2*log(exp(Hb_c/2)+sqrt(exp(Hb_c)-1)));

tD = Hb/(C1*ws);

rate = W*qb/(Vp*vb*t); % bedload model

PSD = rate*(pi^2*m^2*wi^2)/rho_s^2*f.^3./vc.^3./vu.^2.*chi;
end